/*
 _____    _ _            ___
|_   _| _(_) |_ ___ _ _ / __|___ _ _ ___
  | || '_| |  _/ _ \ ' \ (__/ _ \ '_/ -_)
  |_||_| |_|\__\___/_||_\___\___/_| \___|

Copyright © 2023, Michel Gerritse
All rights reserved.

This source code is available under the BSD-3-Clause license.
See LICENSE.txt in the root directory of this source tree.

*/
#ifndef _YM_H_
#define _YM_H_

#include <cstdint>

namespace YM /* Yamaha */
{
	/* ADPCM-A data type */
	struct adpcma_t
	{
		struct channel_t
		{
			uint32_t KeyOn;			/* Key On / Off (flag) */

			uint32_t Level;			/* Channel level (5-bit) */
			 int16_t OutL;			/* Channel L output */
			 int16_t OutR;			/* Channel R output */
			uint32_t MaskL;			/* Channel L output mask */
			uint32_t MaskR;			/* Channel R output mask */

			pair32_t Start;			/* Start address (16-bit) */
			pair32_t End;			/* End address (16-bit) */
			uint32_t Addr;			/* Current address (16-bit) */

			 int16_t Signal;		/* Decoded ADPCM-A signal */
			 int32_t Step;			/* ADPCM-A step */
			uint32_t NibbleShift;	/* Nibble selection shift */
		};

		channel_t	Channel[6];
		uint32_t	TotalLevel;
		 int16_t	OutL;
		 int16_t	OutR;
	};

	/* ADPCM-B data type */
	struct adpcmb_t
	{
		uint8_t		Ctrl1;			/* Control 1 (8-bit) */
		uint8_t		Ctrl2;			/* Control 2 (8-bit) */
		pair32_t	Start;			/* Start address (16-bit) */
		pair32_t	Stop;			/* Stop address (16-bit) */
		pair32_t	Limit;			/* Limit address (16-bit) */
		pair32_t	Prescale;		/* Encoder prescaler (10-bit) */
		pair32_t	DeltaN;			/* Frequency delta (16-bit) */
		uint8_t		LevelCtrl;		/* Level control (8-bit) */
		uint32_t	MaskL;			/* Channel L output mask */
		uint32_t	MaskR;			/* Channel R output mask */
		 int16_t	OutL;			/* Channel L output */
		 int16_t	OutR;			/* Channel R output */

		uint32_t	Addr;			/* Current memory address */
		pair32_t	AddrDelta;		/* Address delta */
		uint32_t	Shift;			/* Address shift */

		int16_t		SignalT1;		/* Decoded ADPCM-B signal */
		int16_t		SignalT0;		/* Previous decoded ADPCM-B signal */
		int32_t		Step;			/* ADPCM-B step */
		uint32_t	NibbleShift;	/* Nibble selection shift */
	};

	/* Half period log-sin table */
	static const uint16_t SineTable[512] =
	{
		/*
		x = [0:255]
		y = round(-log(sin((x + 0.5) * pi / 256 / 2)) / log(2) * 256)

		This table has been constructed from actual YM3812 die shots :
		https://docs.google.com/document/d/18IGx18NQY_Q1PJVZ-bHywao9bhsDoAqoIn1rIm42nwo

		Credits to Matthew Gambrell and Olli Niemitalo
		http://yehar.com/blog/?p=665

		Note: The table has been extended from a quarter to a half period
		*/
		0x0859, 0x06C3, 0x0607, 0x058B, 0x052E, 0x04E4, 0x04A6, 0x0471,
		0x0443, 0x041A, 0x03F5, 0x03D3, 0x03B5, 0x0398, 0x037E, 0x0365,
		0x034E, 0x0339, 0x0324, 0x0311, 0x02FF, 0x02ED, 0x02DC, 0x02CD,
		0x02BD, 0x02AF, 0x02A0, 0x0293, 0x0286, 0x0279, 0x026D, 0x0261,
		0x0256, 0x024B, 0x0240, 0x0236, 0x022C, 0x0222, 0x0218, 0x020F,
		0x0206, 0x01FD, 0x01F5, 0x01EC, 0x01E4, 0x01DC, 0x01D4, 0x01CD,
		0x01C5, 0x01BE, 0x01B7, 0x01B0, 0x01A9, 0x01A2, 0x019B, 0x0195,
		0x018F, 0x0188, 0x0182, 0x017C, 0x0177, 0x0171, 0x016B, 0x0166,
		0x0160, 0x015B, 0x0155, 0x0150, 0x014B, 0x0146, 0x0141, 0x013C,
		0x0137, 0x0133, 0x012E, 0x0129, 0x0125, 0x0121, 0x011C, 0x0118,
		0x0114, 0x010F, 0x010B, 0x0107, 0x0103, 0x00FF, 0x00FB, 0x00F8,
		0x00F4, 0x00F0, 0x00EC, 0x00E9, 0x00E5, 0x00E2, 0x00DE, 0x00DB,
		0x00D7, 0x00D4, 0x00D1, 0x00CD, 0x00CA, 0x00C7, 0x00C4, 0x00C1,
		0x00BE, 0x00BB, 0x00B8, 0x00B5, 0x00B2, 0x00AF, 0x00AC, 0x00A9,
		0x00A7, 0x00A4, 0x00A1, 0x009F, 0x009C, 0x0099, 0x0097, 0x0094,
		0x0092, 0x008F, 0x008D, 0x008A, 0x0088, 0x0086, 0x0083, 0x0081,
		0x007F, 0x007D, 0x007A, 0x0078, 0x0076, 0x0074, 0x0072, 0x0070,
		0x006E, 0x006C, 0x006A, 0x0068, 0x0066, 0x0064, 0x0062, 0x0060,
		0x005E, 0x005C, 0x005B, 0x0059, 0x0057, 0x0055, 0x0053, 0x0052,
		0x0050, 0x004E, 0x004D, 0x004B, 0x004A, 0x0048, 0x0046, 0x0045,
		0x0043, 0x0042, 0x0040, 0x003F, 0x003E, 0x003C, 0x003B, 0x0039,
		0x0038, 0x0037, 0x0035, 0x0034, 0x0033, 0x0031, 0x0030, 0x002F,
		0x002E, 0x002D, 0x002B, 0x002A, 0x0029, 0x0028, 0x0027, 0x0026,
		0x0025, 0x0024, 0x0023, 0x0022, 0x0021, 0x0020, 0x001F, 0x001E,
		0x001D, 0x001C, 0x001B, 0x001A, 0x0019, 0x0018, 0x0017, 0x0017,
		0x0016, 0x0015, 0x0014, 0x0014, 0x0013, 0x0012, 0x0011, 0x0011,
		0x0010, 0x000F, 0x000F, 0x000E, 0x000D, 0x000D, 0x000C, 0x000C,
		0x000B, 0x000A, 0x000A, 0x0009, 0x0009, 0x0008, 0x0008, 0x0007,
		0x0007, 0x0007, 0x0006, 0x0006, 0x0005, 0x0005, 0x0005, 0x0004,
		0x0004, 0x0004, 0x0003, 0x0003, 0x0003, 0x0002, 0x0002, 0x0002,
		0x0002, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001,
		0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
		0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
		0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0002,
		0x0002, 0x0002, 0x0002, 0x0003, 0x0003, 0x0003, 0x0004, 0x0004,
		0x0004, 0x0005, 0x0005, 0x0005, 0x0006, 0x0006, 0x0007, 0x0007,
		0x0007, 0x0008, 0x0008, 0x0009, 0x0009, 0x000A, 0x000A, 0x000B,
		0x000C, 0x000C, 0x000D, 0x000D, 0x000E, 0x000F, 0x000F, 0x0010,
		0x0011, 0x0011, 0x0012, 0x0013, 0x0014, 0x0014, 0x0015, 0x0016,
		0x0017, 0x0017, 0x0018, 0x0019, 0x001A, 0x001B, 0x001C, 0x001D,
		0x001E, 0x001F, 0x0020, 0x0021, 0x0022, 0x0023, 0x0024, 0x0025,
		0x0026, 0x0027, 0x0028, 0x0029, 0x002A, 0x002B, 0x002D, 0x002E,
		0x002F, 0x0030, 0x0031, 0x0033, 0x0034, 0x0035, 0x0037, 0x0038,
		0x0039, 0x003B, 0x003C, 0x003E, 0x003F, 0x0040, 0x0042, 0x0043,
		0x0045, 0x0046, 0x0048, 0x004A, 0x004B, 0x004D, 0x004E, 0x0050,
		0x0052, 0x0053, 0x0055, 0x0057, 0x0059, 0x005B, 0x005C, 0x005E,
		0x0060, 0x0062, 0x0064, 0x0066, 0x0068, 0x006A, 0x006C, 0x006E,
		0x0070, 0x0072, 0x0074, 0x0076, 0x0078, 0x007A, 0x007D, 0x007F,
		0x0081, 0x0083, 0x0086, 0x0088, 0x008A, 0x008D, 0x008F, 0x0092,
		0x0094, 0x0097, 0x0099, 0x009C, 0x009F, 0x00A1, 0x00A4, 0x00A7,
		0x00A9, 0x00AC, 0x00AF, 0x00B2, 0x00B5, 0x00B8, 0x00BB, 0x00BE,
		0x00C1, 0x00C4, 0x00C7, 0x00CA, 0x00CD, 0x00D1, 0x00D4, 0x00D7,
		0x00DB, 0x00DE, 0x00E2, 0x00E5, 0x00E9, 0x00EC, 0x00F0, 0x00F4,
		0x00F8, 0x00FB, 0x00FF, 0x0103, 0x0107, 0x010B, 0x010F, 0x0114,
		0x0118, 0x011C, 0x0121, 0x0125, 0x0129, 0x012E, 0x0133, 0x0137,
		0x013C, 0x0141, 0x0146, 0x014B, 0x0150, 0x0155, 0x015B, 0x0160,
		0x0166, 0x016B, 0x0171, 0x0177, 0x017C, 0x0182, 0x0188, 0x018F,
		0x0195, 0x019B, 0x01A2, 0x01A9, 0x01B0, 0x01B7, 0x01BE, 0x01C5,
		0x01CD, 0x01D4, 0x01DC, 0x01E4, 0x01EC, 0x01F5, 0x01FD, 0x0206,
		0x020F, 0x0218, 0x0222, 0x022C, 0x0236, 0x0240, 0x024B, 0x0256,
		0x0261, 0x026D, 0x0279, 0x0286, 0x0293, 0x02A0, 0x02AF, 0x02BD,
		0x02CD, 0x02DC, 0x02ED, 0x02FF, 0x0311, 0x0324, 0x0339, 0x034E,
		0x0365, 0x037E, 0x0398, 0x03B5, 0x03D3, 0x03F5, 0x041A, 0x0443,
		0x0471, 0x04A6, 0x04E4, 0x052E, 0x058B, 0x0607, 0x06C3, 0x0859
	};

	/* Exponential (or pow2) table */
	static const uint32_t ExpTable[256] =
	{
		/*
		x = [0:255]
		y = round((power(2, x / 256) - 1) * 1024)

		This table has been constructed from actual YM3812 die shots:
		https://docs.google.com/document/d/18IGx18NQY_Q1PJVZ-bHywao9bhsDoAqoIn1rIm42nwo

		Credits to Matthew Gambrell and Olli Niemitalo
		http://yehar.com/blog/?p=665

		Notes: 
		1. Table is reversed
		2. The implicit bit10 has been set
		3. Values are shifted left by 2
		*/

		0x1FE8, 0x1FD4, 0x1FBC, 0x1FA8, 0x1F90, 0x1F7C, 0x1F68, 0x1F50,
		0x1F3C, 0x1F24, 0x1F10, 0x1EFC, 0x1EE4, 0x1ED0, 0x1EB8, 0x1EA4,
		0x1E90, 0x1E7C, 0x1E64, 0x1E50, 0x1E3C, 0x1E28, 0x1E10, 0x1DFC,
		0x1DE8, 0x1DD4, 0x1DC0, 0x1DA8, 0x1D94, 0x1D80, 0x1D6C, 0x1D58,
		0x1D44, 0x1D30, 0x1D1C, 0x1D08, 0x1CF4, 0x1CE0, 0x1CCC, 0x1CB8,
		0x1CA4, 0x1C90, 0x1C7C, 0x1C68, 0x1C54, 0x1C40, 0x1C2C, 0x1C18,
		0x1C08, 0x1BF4, 0x1BE0, 0x1BCC, 0x1BB8, 0x1BA4, 0x1B94, 0x1B80,
		0x1B6C, 0x1B58, 0x1B48, 0x1B34, 0x1B20, 0x1B10, 0x1AFC, 0x1AE8,
		0x1AD4, 0x1AC4, 0x1AB0, 0x1AA0, 0x1A8C, 0x1A78, 0x1A68, 0x1A54,
		0x1A44, 0x1A30, 0x1A20, 0x1A0C, 0x19FC, 0x19E8, 0x19D8, 0x19C4,
		0x19B4, 0x19A0, 0x1990, 0x197C, 0x196C, 0x195C, 0x1948, 0x1938,
		0x1924, 0x1914, 0x1904, 0x18F0, 0x18E0, 0x18D0, 0x18C0, 0x18AC,
		0x189C, 0x188C, 0x1878, 0x1868, 0x1858, 0x1848, 0x1838, 0x1824,
		0x1814, 0x1804, 0x17F4, 0x17E4, 0x17D4, 0x17C0, 0x17B0, 0x17A0,
		0x1790, 0x1780, 0x1770, 0x1760, 0x1750, 0x1740, 0x1730, 0x1720,
		0x1710, 0x1700, 0x16F0, 0x16E0, 0x16D0, 0x16C0, 0x16B0, 0x16A0,
		0x1690, 0x1680, 0x1670, 0x1664, 0x1654, 0x1644, 0x1634, 0x1624,
		0x1614, 0x1604, 0x15F8, 0x15E8, 0x15D8, 0x15C8, 0x15BC, 0x15AC,
		0x159C, 0x158C, 0x1580, 0x1570, 0x1560, 0x1550, 0x1544, 0x1534,
		0x1524, 0x1518, 0x1508, 0x14F8, 0x14EC, 0x14DC, 0x14D0, 0x14C0,
		0x14B0, 0x14A4, 0x1494, 0x1488, 0x1478, 0x146C, 0x145C, 0x1450,
		0x1440, 0x1430, 0x1424, 0x1418, 0x1408, 0x13FC, 0x13EC, 0x13E0,
		0x13D0, 0x13C4, 0x13B4, 0x13A8, 0x139C, 0x138C, 0x1380, 0x1370,
		0x1364, 0x1358, 0x1348, 0x133C, 0x1330, 0x1320, 0x1314, 0x1308,
		0x12F8, 0x12EC, 0x12E0, 0x12D4, 0x12C4, 0x12B8, 0x12AC, 0x12A0,
		0x1290, 0x1284, 0x1278, 0x126C, 0x1260, 0x1250, 0x1244, 0x1238,
		0x122C, 0x1220, 0x1214, 0x1208, 0x11F8, 0x11EC, 0x11E0, 0x11D4,
		0x11C8, 0x11BC, 0x11B0, 0x11A4, 0x1198, 0x118C, 0x1180, 0x1174,
		0x1168, 0x115C, 0x1150, 0x1144, 0x1138, 0x112C, 0x1120, 0x1114,
		0x1108, 0x10FC, 0x10F0, 0x10E4, 0x10D8, 0x10CC, 0x10C0, 0x10B4,
		0x10A8, 0x10A0, 0x1094, 0x1088, 0x107C, 0x1070, 0x1064, 0x1058,
		0x1050, 0x1044, 0x1038, 0x102C, 0x1020, 0x1018, 0x100C, 0x1000
	};

} // namespace YM

#endif // !_YM_H_